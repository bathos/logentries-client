
// IMPORTS /////////////////////////////////////////////////////////////////////

import _                                    from 'lodash';
import * as defaults                        from 'defaults';
import text                                 from 'text';
import { BadOptionsError }                  from 'error';

// Temporary replacement for isInteger pending resolution of Core JS bug.

function isInteger(n){
  return isFinite(n) && Math.floor(n) === n;
}

// NORMALIZATION & DEFAULTS ////////////////////////////////////////////////////

export const normalize = (opts) => {

	let custom = opts.levels;

	if (!_.isUndefined(custom) && !_.isNull(custom) && !_.isObject(custom))
		throw new BadOptionsError(opts, text.levelsNotObj(typeof custom));

	if (!custom)
		return defaults.levels.slice();

	custom = _.isArray(custom) ? normArr(custom, opts) : normObj(custom, opts);

	const levels = defaults.levels.map((lvl, i) => custom[i] || lvl);

	const duplicates =
		_(levels).countBy().pick(count => count > 1).keys().value();

	if (duplicates.length)
		throw new BadOptionsError(opts, text.duplicateLevels(duplicates));

	return levels;
};

const normArr = (arr, opts) => {
	if (arr.length > 8)
		throw new BadOptionsError(opts, text.tooManyLevels(arr.length));

		return arr.map(val => {
			if (val && _.isString(val)) return val;
			if (_.isNumber(val) && isFinite(val)) return val.toString();
			if (_.isNull(val) || _.isUndefined(val)) return;

			throw new BadOptionsError(opts, text.levelNotString(val));
		});
};

const normObj = (obj, opts) => {
	const lvlNums = _.values(obj);

	for (const num of lvlNums) {
		if (!isNumberValid(num))
			throw new BadOptionsError(opts, text.invalidLevelNum(num));
	}

	const duplicates =
		_(obj).countBy().pick(lvl => lvl > 1).keys().value();

	if (duplicates.length)
		throw new BadOptionsError(opts, text.duplicateLevelNums(duplicates));

	return _.reduce(obj, (arr, i, name) => { arr[i] = name; return arr; }, []);
};

// LEVEL NUMBERS ///////////////////////////////////////////////////////////////

export const isNumberValid = n => isInteger(parseFloat(n)) && _.inRange(n, 8);
